import { Request, Response, NextFunction } from 'express';\nimport { AuthService } from '../services/auth.service';\nimport { RepositoryFactory } from '../repositories/repository.factory';\nimport { UserCreationParams, UserRole } from '../models/user.model';\nimport { validationResult, body } from 'express-validator';\n\n/**\n * Authentication controller\n */\nexport class AuthController {\n  private authService: AuthService;\n\n  constructor(repositoryFactory: RepositoryFactory) {\n    this.authService = new AuthService(repositoryFactory);\n  }\n\n  /**\n   * Register validation rules\n   */\n  public static registerValidationRules = [\n    body('username')\n      .isString()\n      .isLength({ min: 3, max: 30 })\n      .withMessage('Username must be between 3 and 30 characters')\n      .matches(/^[a-zA-Z0-9_-]+$/)\n      .withMessage('Username can only contain letters, numbers, underscores, and hyphens'),\n    body('email')\n      .isEmail()\n      .withMessage('Email must be valid')\n      .normalizeEmail(),\n    body('password')\n      .isString()\n      .isLength({ min: 8 })\n      .withMessage('Password must be at least 8 characters long')\n      .matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/)\n      .withMessage('Password must contain at least one uppercase letter, one lowercase letter, and one number'),\n    body('first_name')\n      .optional()\n      .isString()\n      .isLength({ max: 50 })\n      .withMessage('First name must be less than 50 characters'),\n    body('last_name')\n      .optional()\n      .isString()\n      .isLength({ max: 50 })\n      .withMessage('Last name must be less than 50 characters'),\n    body('role')\n      .optional()\n      .isIn(Object.values(UserRole))\n      .withMessage('Role must be a valid user role')\n  ];\n\n  /**\n   * Login validation rules\n   */\n  public static loginValidationRules = [\n    body('usernameOrEmail')\n      .isString()\n      .notEmpty()\n      .withMessage('Username or email is required'),\n    body('password')\n      .isString()\n      .notEmpty()\n      .withMessage('Password is required')\n  ];\n\n  /**\n   * Register a new user\n   * @param req Express request\n   * @param res Express response\n   * @param next Express next function\n   */\n  public register = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      // Validate request\n      const errors = validationResult(req);\n      if (!errors.isEmpty()) {\n        res.status(400).json({ errors: errors.array() });\n        return;\n      }\n\n      // Extract user data from request\n      const userData: UserCreationParams = {\n        username: req.body.username,\n        email: req.body.email,\n        password: req.body.password,\n        first_name: req.body.first_name,\n        last_name: req.body.last_name,\n        role: req.body.role || UserRole.PLAYER\n      };\n\n      // Register user\n      const user = await this.authService.register(userData);\n\n      // Return user data\n      res.status(201).json({\n        message: 'User registered successfully',\n        user\n      });\n    } catch (error) {\n      // Handle specific errors\n      if (error instanceof Error) {\n        if (error.message === 'Username already exists' || error.message === 'Email already exists') {\n          res.status(409).json({ message: error.message });\n          return;\n        }\n      }\n\n      // Pass other errors to error handler\n      next(error);\n    }\n  };\n\n  /**\n   * Login user\n   * @param req Express request\n   * @param res Express response\n   * @param next Express next function\n   */\n  public login = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      // Validate request\n      const errors = validationResult(req);\n      if (!errors.isEmpty()) {\n        res.status(400).json({ errors: errors.array() });\n        return;\n      }\n\n      // Extract login data from request\n      const { usernameOrEmail, password } = req.body;\n\n      // Login user\n      const authResult = await this.authService.login(usernameOrEmail, password);\n\n      // Return auth result\n      res.status(200).json({\n        message: 'Login successful',\n        user: authResult.user,\n        token: authResult.token,\n        refresh_token: authResult.refresh_token\n      });\n    } catch (error) {\n      // Handle specific errors\n      if (error instanceof Error) {\n        if (\n          error.message === 'Invalid username/email or password' ||\n          error.message === 'User account is inactive'\n        ) {\n          res.status(401).json({ message: error.message });\n          return;\n        }\n      }\n\n      // Pass other errors to error handler\n      next(error);\n    }\n  };\n}
