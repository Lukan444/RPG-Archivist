import { Response, NextFunction } from 'express';\nimport { AuthMiddleware, AuthRequest } from '../../middleware/auth.middleware';\nimport { AuthService } from '../../services/auth.service';\nimport { RepositoryFactory } from '../../repositories/repository.factory';\nimport { UserRole } from '../../models/user.model';\nimport { ApiError } from '../../middleware/error.middleware';\n\n// Mock dependencies\njest.mock('../../services/auth.service');\njest.mock('../../repositories/repository.factory');\njest.mock('../../services/database.service');\n\ndescribe('AuthMiddleware', () => {\n  let authMiddleware: AuthMiddleware;\n  let req: Partial<AuthRequest>;\n  let res: Partial<Response>;\n  let next: jest.Mock;\n\n  beforeEach(() => {\n    // Reset mocks\n    jest.clearAllMocks();\n\n    // Initialize middleware\n    authMiddleware = new AuthMiddleware();\n\n    // Mock request, response, and next\n    req = {\n      headers: {},\n      user: undefined\n    };\n\n    res = {\n      status: jest.fn().mockReturnThis(),\n      json: jest.fn()\n    };\n\n    next = jest.fn();\n  });\n\n  describe('authenticate', () => {\n    test('should authenticate user with valid token', async () => {\n      // Mock authorization header\n      req.headers = {\n        authorization: 'Bearer valid-token'\n      };\n\n      // Mock verifyToken method\n      (AuthService.prototype.verifyToken as jest.Mock).mockReturnValue({\n        sub: '123',\n        username: 'testuser',\n        email: 'test@example.com',\n        role: UserRole.PLAYER\n      });\n\n      // Call middleware\n      await authMiddleware.authenticate(req as AuthRequest, res as Response, next);\n\n      // Check if verifyToken was called with correct token\n      expect(AuthService.prototype.verifyToken).toHaveBeenCalledWith('valid-token');\n\n      // Check if user was set in request\n      expect(req.user).toEqual({\n        user_id: '123',\n        username: 'testuser',\n        email: 'test@example.com',\n        role: UserRole.PLAYER\n      });\n\n      // Check if next was called\n      expect(next).toHaveBeenCalled();\n    });\n\n    test('should return 401 if no authorization header is provided', async () => {\n      // Call middleware\n      await authMiddleware.authenticate(req as AuthRequest, res as Response, next);\n\n      // Check if next was called with error\n      expect(next).toHaveBeenCalledWith(expect.any(ApiError));\n      expect(next.mock.calls[0][0].status).toBe(401);\n      expect(next.mock.calls[0][0].message).toBe('No authorization header provided');\n    });\n\n    test('should return 401 if authorization header format is invalid', async () => {\n      // Mock invalid authorization header\n      req.headers = {\n        authorization: 'InvalidFormat'\n      };\n\n      // Call middleware\n      await authMiddleware.authenticate(req as AuthRequest, res as Response, next);\n\n      // Check if next was called with error\n      expect(next).toHaveBeenCalledWith(expect.any(ApiError));\n      expect(next.mock.calls[0][0].status).toBe(401);\n      expect(next.mock.calls[0][0].message).toBe('Invalid authorization header format');\n    });\n\n    test('should return 401 if token is invalid', async () => {\n      // Mock authorization header\n      req.headers = {\n        authorization: 'Bearer invalid-token'\n      };\n\n      // Mock verifyToken method to throw error\n      (AuthService.prototype.verifyToken as jest.Mock).mockImplementation(() => {\n        throw new Error('Invalid token');\n      });\n\n      // Call middleware\n      await authMiddleware.authenticate(req as AuthRequest, res as Response, next);\n\n      // Check if next was called with error\n      expect(next).toHaveBeenCalledWith(expect.any(ApiError));\n      expect(next.mock.calls[0][0].status).toBe(401);\n      expect(next.mock.calls[0][0].message).toBe('Invalid or expired token');\n    });\n\n    test('should return 401 if token is expired', async () => {\n      // Mock authorization header\n      req.headers = {\n        authorization: 'Bearer expired-token'\n      };\n\n      // Mock verifyToken method to throw error\n      (AuthService.prototype.verifyToken as jest.Mock).mockImplementation(() => {\n        throw new Error('jwt expired');\n      });\n\n      // Call middleware\n      await authMiddleware.authenticate(req as AuthRequest, res as Response, next);\n\n      // Check if next was called with error\n      expect(next).toHaveBeenCalledWith(expect.any(ApiError));\n      expect(next.mock.calls[0][0].status).toBe(401);\n      expect(next.mock.calls[0][0].message).toBe('Invalid or expired token');\n    });\n\n    test('should pass other errors to error handler', async () => {\n      // Mock authorization header\n      req.headers = {\n        authorization: 'Bearer token'\n      };\n\n      // Mock verifyToken method to throw error\n      (AuthService.prototype.verifyToken as jest.Mock).mockImplementation(() => {\n        throw new Error('Other error');\n      });\n\n      // Call middleware\n      await authMiddleware.authenticate(req as AuthRequest, res as Response, next);\n\n      // Check if next was called with error\n      expect(next).toHaveBeenCalledWith(expect.any(Error));\n      expect(next.mock.calls[0][0].message).toBe('Other error');\n    });\n  });\n\n  describe('hasRole', () => {\n    beforeEach(() => {\n      // Set user in request\n      req.user = {\n        user_id: '123',\n        username: 'testuser',\n        email: 'test@example.com',\n        role: UserRole.PLAYER\n      };\n    });\n\n    test('should allow access if user has required role', () => {\n      // Create middleware\n      const middleware = authMiddleware.hasRole(UserRole.PLAYER);\n\n      // Call middleware\n      middleware(req as AuthRequest, res as Response, next);\n\n      // Check if next was called\n      expect(next).toHaveBeenCalled();\n    });\n\n    test('should allow access if user has one of required roles', () => {\n      // Create middleware\n      const middleware = authMiddleware.hasRole([UserRole.ADMIN, UserRole.PLAYER]);\n\n      // Call middleware\n      middleware(req as AuthRequest, res as Response, next);\n\n      // Check if next was called\n      expect(next).toHaveBeenCalled();\n    });\n\n    test('should return 403 if user does not have required role', () => {\n      // Create middleware\n      const middleware = authMiddleware.hasRole(UserRole.ADMIN);\n\n      // Call middleware\n      middleware(req as AuthRequest, res as Response, next);\n\n      // Check if next was called with error\n      expect(next).toHaveBeenCalledWith(expect.any(ApiError));\n      expect(next.mock.calls[0][0].status).toBe(403);\n      expect(next.mock.calls[0][0].message).toBe('Insufficient permissions');\n    });\n\n    test('should return 403 if user does not have any of required roles', () => {\n      // Create middleware\n      const middleware = authMiddleware.hasRole([UserRole.ADMIN, UserRole.GAME_MASTER]);\n\n      // Call middleware\n      middleware(req as AuthRequest, res as Response, next);\n\n      // Check if next was called with error\n      expect(next).toHaveBeenCalledWith(expect.any(ApiError));\n      expect(next.mock.calls[0][0].status).toBe(403);\n      expect(next.mock.calls[0][0].message).toBe('Insufficient permissions');\n    });\n\n    test('should return 401 if user is not authenticated', () => {\n      // Remove user from request\n      req.user = undefined;\n\n      // Create middleware\n      const middleware = authMiddleware.hasRole(UserRole.PLAYER);\n\n      // Call middleware\n      middleware(req as AuthRequest, res as Response, next);\n\n      // Check if next was called with error\n      expect(next).toHaveBeenCalledWith(expect.any(ApiError));\n      expect(next.mock.calls[0][0].status).toBe(401);\n      expect(next.mock.calls[0][0].message).toBe('User not authenticated');\n    });\n  });\n\n  describe('isOwnerOrAdmin', () => {\n    beforeEach(() => {\n      // Set user in request\n      req.user = {\n        user_id: '123',\n        username: 'testuser',\n        email: 'test@example.com',\n        role: UserRole.PLAYER\n      };\n    });\n\n    test('should allow access if user is the owner', async () => {\n      // Create middleware\n      const middleware = authMiddleware.isOwnerOrAdmin(() => '123');\n\n      // Call middleware\n      await middleware(req as AuthRequest, res as Response, next);\n\n      // Check if next was called\n      expect(next).toHaveBeenCalled();\n    });\n\n    test('should allow access if user is admin', async () => {\n      // Set user as admin\n      req.user = {\n        user_id: '123',\n        username: 'testuser',\n        email: 'test@example.com',\n        role: UserRole.ADMIN\n      };\n\n      // Create middleware\n      const middleware = authMiddleware.isOwnerOrAdmin(() => '456');\n\n      // Call middleware\n      await middleware(req as AuthRequest, res as Response, next);\n\n      // Check if next was called\n      expect(next).toHaveBeenCalled();\n    });\n\n    test('should return 403 if user is not the owner or admin', async () => {\n      // Create middleware\n      const middleware = authMiddleware.isOwnerOrAdmin(() => '456');\n\n      // Call middleware\n      await middleware(req as AuthRequest, res as Response, next);\n\n      // Check if next was called with error\n      expect(next).toHaveBeenCalledWith(expect.any(ApiError));\n      expect(next.mock.calls[0][0].status).toBe(403);\n      expect(next.mock.calls[0][0].message).toBe('Insufficient permissions');\n    });\n\n    test('should return 401 if user is not authenticated', async () => {\n      // Remove user from request\n      req.user = undefined;\n\n      // Create middleware\n      const middleware = authMiddleware.isOwnerOrAdmin(() => '123');\n\n      // Call middleware\n      await middleware(req as AuthRequest, res as Response, next);\n\n      // Check if next was called with error\n      expect(next).toHaveBeenCalledWith(expect.any(ApiError));\n      expect(next.mock.calls[0][0].status).toBe(401);\n      expect(next.mock.calls[0][0].message).toBe('User not authenticated');\n    });\n\n    test('should handle async getUserId function', async () => {\n      // Create middleware\n      const middleware = authMiddleware.isOwnerOrAdmin(async () => '123');\n\n      // Call middleware\n      await middleware(req as AuthRequest, res as Response, next);\n\n      // Check if next was called\n      expect(next).toHaveBeenCalled();\n    });\n\n    test('should pass errors from getUserId to error handler', async () => {\n      // Create middleware\n      const middleware = authMiddleware.isOwnerOrAdmin(() => {\n        throw new Error('Error getting user ID');\n      });\n\n      // Call middleware\n      await middleware(req as AuthRequest, res as Response, next);\n\n      // Check if next was called with error\n      expect(next).toHaveBeenCalledWith(expect.any(Error));\n      expect(next.mock.calls[0][0].message).toBe('Error getting user ID');\n    });\n  });\n});
