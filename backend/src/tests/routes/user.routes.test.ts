import request from 'supertest';\nimport express from 'express';\nimport { userRouter } from '../../routes/user.routes';\nimport { RepositoryFactory } from '../../repositories/repository.factory';\nimport { AuthService } from '../../services/auth.service';\nimport { UserRole } from '../../models/user.model';\nimport { errorHandlerMiddleware } from '../../middleware/error.middleware';\n\n// Mock dependencies\njest.mock('../../repositories/repository.factory');\njest.mock('../../services/auth.service');\njest.mock('../../services/database.service');\n\ndescribe('User Routes', () => {\n  let app: express.Application;\n  let repositoryFactory: RepositoryFactory;\n\n  beforeEach(() => {\n    // Reset mocks\n    jest.clearAllMocks();\n\n    // Initialize mocks\n    repositoryFactory = new RepositoryFactory({} as any);\n\n    // Create Express app\n    app = express();\n    app.use(express.json());\n    app.use('/users', userRouter(repositoryFactory));\n    app.use(errorHandlerMiddleware);\n  });\n\n  describe('GET /users/profile', () => {\n    test('should return user profile for authenticated user', async () => {\n      // Mock verifyToken method\n      (AuthService.prototype.verifyToken as jest.Mock).mockReturnValue({\n        sub: '123',\n        username: 'testuser',\n        email: 'test@example.com',\n        role: UserRole.PLAYER\n      });\n\n      const response = await request(app)\n        .get('/users/profile')\n        .set('Authorization', 'Bearer valid-token');\n\n      expect(response.status).toBe(200);\n      expect(response.body).toEqual({\n        user: {\n          user_id: '123',\n          username: 'testuser',\n          email: 'test@example.com',\n          role: UserRole.PLAYER\n        }\n      });\n    });\n\n    test('should return 401 for missing token', async () => {\n      const response = await request(app).get('/users/profile');\n\n      expect(response.status).toBe(401);\n      expect(response.body).toHaveProperty('message', 'No authorization header provided');\n    });\n\n    test('should return 401 for invalid token', async () => {\n      // Mock verifyToken method to throw error\n      (AuthService.prototype.verifyToken as jest.Mock).mockImplementation(() => {\n        throw new Error('Invalid token');\n      });\n\n      const response = await request(app)\n        .get('/users/profile')\n        .set('Authorization', 'Bearer invalid-token');\n\n      expect(response.status).toBe(401);\n      expect(response.body).toHaveProperty('message', 'Invalid or expired token');\n    });\n  });\n\n  describe('GET /users/admin', () => {\n    test('should allow access for admin users', async () => {\n      // Mock verifyToken method\n      (AuthService.prototype.verifyToken as jest.Mock).mockReturnValue({\n        sub: '123',\n        username: 'admin',\n        email: 'admin@example.com',\n        role: UserRole.ADMIN\n      });\n\n      const response = await request(app)\n        .get('/users/admin')\n        .set('Authorization', 'Bearer valid-token');\n\n      expect(response.status).toBe(200);\n      expect(response.body).toEqual({\n        message: 'Admin access granted'\n      });\n    });\n\n    test('should return 403 for non-admin users', async () => {\n      // Mock verifyToken method\n      (AuthService.prototype.verifyToken as jest.Mock).mockReturnValue({\n        sub: '123',\n        username: 'testuser',\n        email: 'test@example.com',\n        role: UserRole.PLAYER\n      });\n\n      const response = await request(app)\n        .get('/users/admin')\n        .set('Authorization', 'Bearer valid-token');\n\n      expect(response.status).toBe(403);\n      expect(response.body).toHaveProperty('message', 'Insufficient permissions');\n    });\n  });\n\n  describe('GET /users/game-master', () => {\n    test('should allow access for admin users', async () => {\n      // Mock verifyToken method\n      (AuthService.prototype.verifyToken as jest.Mock).mockReturnValue({\n        sub: '123',\n        username: 'admin',\n        email: 'admin@example.com',\n        role: UserRole.ADMIN\n      });\n\n      const response = await request(app)\n        .get('/users/game-master')\n        .set('Authorization', 'Bearer valid-token');\n\n      expect(response.status).toBe(200);\n      expect(response.body).toEqual({\n        message: 'Game master access granted'\n      });\n    });\n\n    test('should allow access for game master users', async () => {\n      // Mock verifyToken method\n      (AuthService.prototype.verifyToken as jest.Mock).mockReturnValue({\n        sub: '123',\n        username: 'gm',\n        email: 'gm@example.com',\n        role: UserRole.GAME_MASTER\n      });\n\n      const response = await request(app)\n        .get('/users/game-master')\n        .set('Authorization', 'Bearer valid-token');\n\n      expect(response.status).toBe(200);\n      expect(response.body).toEqual({\n        message: 'Game master access granted'\n      });\n    });\n\n    test('should return 403 for player users', async () => {\n      // Mock verifyToken method\n      (AuthService.prototype.verifyToken as jest.Mock).mockReturnValue({\n        sub: '123',\n        username: 'testuser',\n        email: 'test@example.com',\n        role: UserRole.PLAYER\n      });\n\n      const response = await request(app)\n        .get('/users/game-master')\n        .set('Authorization', 'Bearer valid-token');\n\n      expect(response.status).toBe(403);\n      expect(response.body).toHaveProperty('message', 'Insufficient permissions');\n    });\n  });\n});
